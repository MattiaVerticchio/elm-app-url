[{"name":"AppUrl","comment":" URLs for applications.\n\n\n# Types\n\n@docs AppUrl, QueryParameters\n\n\n# Parse\n\n@docs fromFullUrl\n\n\n# Stringify\n\n@docs toString, pathToString\n\n","unions":[],"aliases":[{"name":"AppUrl","comment":" You might recognize this diagram from the core [Url] type documentation:\n\n      https://example.com:8042/over/there?name=ferret#nose\n      \\___/   \\______________/\\_________/ \\_________/ \\__/\n        |            |            |            |        |\n      scheme     authority       path        query   fragment\n\n`AppUrl` represents only path + query + fragment:\n\n      https://example.com:8042/over/there?name=ferret#nose\n                              \\__________________________/\n                                            |\n                                         AppUrl\n\nThat’s the part you’ll work the most with in your app.\n\nAn `AppUrl` is “more parsed“ than [Url] (where everything is a string):\n\n  - `path`: `List String`. The path, split by slash. This makes it convenient to\n    pattern match on the segments.\n  - `queryParameters`: [QueryParameters](#QueryParameters). A dict of the query\n    parameters, with keys mapped to the values.\n  - `fragment`: `Maybe String`. The fragment, without the leading hash symbol.\n\nEach path segment, query parameter key, query parameter value and the fragment\nare all percent decoded, so you never need to think about that. For example,\n`%20` is turned into a space and `%2F` is turned into a slash.\n\nYou can think of [Url] as the type you get from Elm when using\n[Browser.application]. From it you can create an `AppUrl`, and that’s what\nyou’ll use when parsing which page you’re on and when creating links.\n\n[Browser.application]: https://package.elm-lang.org/packages/elm/browser/latest/Browser#application\n[Url]: https://package.elm-lang.org/packages/elm/url/latest/Url#Url\n\n","args":[],"type":"{ path : List.List String.String, queryParameters : AppUrl.QueryParameters, fragment : Maybe.Maybe String.String }"},{"name":"QueryParameters","comment":" A dict of the query parameters, with keys mapped to the values. The same key\nmight be given more than once, so each key is mapped to a list of values.\n\nGet all values of a key:\n\n    Dict.get \"myParam\" url.queryParameters\n\nGet the first value:\n\n    Dict.get \"myParam\" url.queryParameters |> Maybe.andThen List.head\n\nGet the last value:\n\n    Dict.get \"myParam\" url.queryParameters |> Maybe.andThen List.Extra.last\n\nSee also [choosing a query parameter][choose] and [query parameter\nparsing][parse] for extra details.\n\n[choose]: https://package.elm-lang.org/packages/lydell/elm-app-url/latest#choosing-a-query-parameter\n[parse]: https://package.elm-lang.org/packages/lydell/elm-app-url/latest#query-parameter-parsing\n\n","args":[],"type":"Dict.Dict String.String (List.List String.String)"}],"values":[{"name":"fromFullUrl","comment":" Turn a [Url] from [elm/url] into an [AppUrl](#AppUrl).\n\nThis removes one trailing slash from the end of the path (if any), for convenience.\nFor example, `/one/two` and `/one/two/` are both turned into `[ \"one\", \"two\" ]`.\n\nSome sites use a trailing slash, some don’t. Users don’t know what to use where.\nThis lets you support both. It’s up to you if you want to update the URL to a\ncanonical version.\n\nNote: You can add an empty string at the end of the path, like `[ \"one\", \"two\", \"\" ]`\nif you want to create a string with a trailing slash.\n\n[Url]: https://package.elm-lang.org/packages/elm/url/latest/Url#Url\n[elm/url]: https://package.elm-lang.org/packages/elm/url/latest\n\n","type":"Url.Url -> AppUrl.AppUrl"},{"name":"pathToString","comment":" Convenience function for creating a URL string like `/one/two` – starting with a\nslash, and without query parameters or fragment. (Use [AppUrl.toString](#toString)\nif you need those.)\n\nHere’s how it relates to [AppUrl.toString](#toString):\n\n    pathToString : List String -> String\n    pathToString path =\n        AppUrl.toString\n            { path = path\n            , queryParameters = Dict.empty\n            , fragment = Nothing\n            }\n\n","type":"List.List String.String -> String.String"},{"name":"toString","comment":" Turn an [AppUrl](#AppUrl) into a string.\n\n  - The string always starts with `/`.\n  - It only contains a `?` if there are any query parameters.\n  - Similarly, it only contains a `#` if there is a fragment.\n  - Query parameters with the empty string as the value don’t get any equals\n    sign: `?k`, not `?k=`.\n  - Query parameters are sorted by key.\n\nEach path segment, query parameter key, query parameter value and the fragment\nare all percent encoded, but very minimally. See [escaping] and [plus and space] for details.\n\nSee also [Full and relative URLs].\n\n[Full and relative URLs]: https://package.elm-lang.org/packages/lydell/elm-app-url/latest#full-and-relative-urls\n[escaping]: https://package.elm-lang.org/packages/lydell/elm-app-url/latest#escaping\n[plus and space]: https://package.elm-lang.org/packages/lydell/elm-app-url/latest#plus-and-space\n\n","type":"AppUrl.AppUrl -> String.String"}],"binops":[]}]